https://leetcode.com/tag/tree/
https://leetcode.com/tag/dynamic-programming/

https://leetcode.com/problems/maximum-subarray/

/* Image a graph: x-axis is i, y axis is the anwser 
 * You get a multiple-mountain graph is any positive num inside
 * Note that all-negative string should check maximum without sum
 */
int maxSubArray(int* nums, int numsSize)
{
    int max = nums[0];
    int sum = nums[0];
    for(int i = 1; i < numsSize; i++)
    {        
        sum += nums[i];                     /* merge next */
        
        /* Condition 1 "sum < 0"
         *     Actually means "continuouly negative, or sum change from positive to negative"
         *     This means needs to find new positive start in both of above condition
         * Condition 2 "|| sum < nums[i]"
         *     Actually means "sum_prev < 0 && nums[i] > 0"
         *     This means we find next positive, start sum again
         */
        if (sum < 0 || sum < nums[i])
            sum = nums[i];
        if (max < sum)                      /* reserve history max */
            max = sum;
    }
    return max;        
}
